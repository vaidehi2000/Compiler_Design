Program:VarDeclList FunDeclList
VarDeclList:^
VarDeclList:VarDecl VarDeclList
VarDecl:Type id ;
VarDecl:Type id [ num ] ;
FunDeclList:FunDecl
FunDeclList:FunDecl FunDeclList
FunDecl:Type id ( ParamDecList ) Block
ParamDecList:^
ParamDecList:ParamDeclListTail
ParamDeclListTail:ParamDecl
ParamDeclListTail:ParamDecl , ParamDeclListTail
ParamDecl:Type id
ParamDecl:Type id [ ]
Block:{ VarDeclList StmtList }
Type:int
Type:char
StmtList:Stmt
StmtList:Stmt StmtList
UnaryOp:-
UnaryOp:!
BinOp:+
BinOp:-
BinOp:*
BinOp:/
BinOp:==
BinOp:!=
BinOp:<
BinOp:<=
BinOp:>
BinOp:>=
BinOp:&&
BinOp:||
Stmt:;
Stmt:Expr ;
Stmt:return Expr ;
Stmt:read id ;
Stmt:write Expr ;
Stmt:writeln ;
Stmt:break ;
Stmt:if ( Expr ) Stmt else Stmt
Stmt:while ( Expr ) Stmt
Stmt:Block
Expr:id
Expr:num
Expr:( Expr )
Expr:id ( ExprList )
Expr:id [ Expr ]
Expr:UnaryOp Expr
Expr:Expr BinOp Expr
Expr:id = Expr
Expr:id [ Expr ] = Expr
ExprList:^
ExprList:ExprListTail
ExprListTail:Expr
ExprListTail:Expr , ExprListTail
